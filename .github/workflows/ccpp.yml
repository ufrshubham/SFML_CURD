name: C/C++ CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: run-cmake
      uses: lukka/run-cmake@v2.5
      with:
        # Select the mode of the action. There are three different modes: CMakeListsTxtBasic: Run CMake using a CMakeLists.txt - Basic configuration, CMakeListsTxtAdvanced: Run CMake using a CMakeLists.txt - Advanced configuration, CMakeSettingsJson: Run CMake using a CMakeSettings.json of Visual Studio.
        cmakeListsOrSettingsJson: CMakeListsTxtBasic
        # Path to CMakeLists.txt. Used for both CMakeListsTxtBasic and CMakeListsTxtAdvanced modes.
        cmakeListsTxtPath: ${{ github.workspace }}/CMakeLists.txt
        # Select the build configuration, typically Debug or Release. Used by CMakeListsTxtBasic mode.
        cmakeBuildType: Debug
        # Specify the CMake generator to use. Possible values: Ninja: Ninja, NinjaMulti: Ninja Multi-Config UnixMakefiles: Unix Makefiles, VS16Win64: Visual Studio 2019 x64, VS16Arm64: Visual Studio 2019 ARM64, VS16Arm: Visual Studio 2019 ARM, VS16Win32: Visual Studio 2019 Win32, VS15Win64: Visual Studio 2017 x64, VS15Arm64: Visual Studio 2017 ARM64, VS15Arm: Visual Studio 2017 ARM, VS15Win32: Visual Studio 2017 Win32. Used by CMakeListsTxtBasic mode.
        cmakeGenerator: Ninja
        # The shell command that woud setup the environment and then invoke the cmake command. An example is 'emcmake' of Emscripten SDK. Used by any mode.
        cmakeWrapperCommand: sudo apt install libsfml-dev libsqlite3-dev
        # Indicates whether to run 'cmake --build' after CMake project files have been generated successfully. Used by any mode.
        buildWithCMake: true
        # Specify which shell to be used when launching commands. 'true' means the default shell is used. 'false' means no shell is used. It also can be an absolute with arguments of the shell to spawn commands with.
        useShell: true
